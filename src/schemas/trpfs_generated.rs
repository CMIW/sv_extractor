// automatically generated by the FlatBuffers compiler, do not modify


// @generated
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod trpfs {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TRPFSOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TRPFS<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TRPFS<'a> {
  type Inner = TRPFS<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TRPFS<'a> {
  pub const VT_HASHES: flatbuffers::VOffsetT = 4;
  pub const VT_FILE_OFFSETS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TRPFS { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TRPFSArgs<'args>
  ) -> flatbuffers::WIPOffset<TRPFS<'bldr>> {
    let mut builder = TRPFSBuilder::new(_fbb);
    if let Some(x) = args.file_offsets { builder.add_file_offsets(x); }
    if let Some(x) = args.hashes { builder.add_hashes(x); }
    builder.finish()
  }


  #[inline]
  pub fn hashes(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(TRPFS::VT_HASHES, None)}
  }
  #[inline]
  pub fn file_offsets(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(TRPFS::VT_FILE_OFFSETS, None)}
  }
}

impl flatbuffers::Verifiable for TRPFS<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("hashes", Self::VT_HASHES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("file_offsets", Self::VT_FILE_OFFSETS, false)?
     .finish();
    Ok(())
  }
}
pub struct TRPFSArgs<'a> {
    pub hashes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub file_offsets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}
impl<'a> Default for TRPFSArgs<'a> {
  #[inline]
  fn default() -> Self {
    TRPFSArgs {
      hashes: None,
      file_offsets: None,
    }
  }
}

pub struct TRPFSBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TRPFSBuilder<'a, 'b> {
  #[inline]
  pub fn add_hashes(&mut self, hashes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPFS::VT_HASHES, hashes);
  }
  #[inline]
  pub fn add_file_offsets(&mut self, file_offsets: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPFS::VT_FILE_OFFSETS, file_offsets);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TRPFSBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TRPFSBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TRPFS<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TRPFS<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TRPFS");
      ds.field("hashes", &self.hashes());
      ds.field("file_offsets", &self.file_offsets());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TRPFS`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpfs_unchecked`.
pub fn root_as_trpfs(buf: &[u8]) -> Result<TRPFS, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TRPFS>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TRPFS` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trpfs_unchecked`.
pub fn size_prefixed_root_as_trpfs(buf: &[u8]) -> Result<TRPFS, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TRPFS>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TRPFS` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpfs_unchecked`.
pub fn root_as_trpfs_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPFS<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TRPFS<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TRPFS` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpfs_unchecked`.
pub fn size_prefixed_root_as_trpfs_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPFS<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TRPFS<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TRPFS and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TRPFS`.
pub unsafe fn root_as_trpfs_unchecked(buf: &[u8]) -> TRPFS {
  flatbuffers::root_unchecked::<TRPFS>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TRPFS and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TRPFS`.
pub unsafe fn size_prefixed_root_as_trpfs_unchecked(buf: &[u8]) -> TRPFS {
  flatbuffers::size_prefixed_root_unchecked::<TRPFS>(buf)
}
pub const TRPFS_EXTENSION: &str = "trpfs";

#[inline]
pub fn finish_trpfs_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TRPFS<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trpfs_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TRPFS<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod trpfs

