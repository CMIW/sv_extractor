// automatically generated by the FlatBuffers compiler, do not modify


// @generated
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod trpfd {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum InfoTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InfoTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InfoTable<'a> {
  type Inner = InfoTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> InfoTable<'a> {
  pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
  pub const VT_COUNT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InfoTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args InfoTableArgs
  ) -> flatbuffers::WIPOffset<InfoTable<'bldr>> {
    let mut builder = InfoTableBuilder::new(_fbb);
    builder.add_count(args.count);
    builder.add_size_(args.size_);
    builder.finish()
  }


  #[inline]
  pub fn size_(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(InfoTable::VT_SIZE_, Some(0)).unwrap()}
  }
  #[inline]
  pub fn count(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(InfoTable::VT_COUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for InfoTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("size_", Self::VT_SIZE_, false)?
     .visit_field::<u64>("count", Self::VT_COUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct InfoTableArgs {
    pub size_: u64,
    pub count: u64,
}
impl<'a> Default for InfoTableArgs {
  #[inline]
  fn default() -> Self {
    InfoTableArgs {
      size_: 0,
      count: 0,
    }
  }
}

pub struct InfoTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InfoTableBuilder<'a, 'b> {
  #[inline]
  pub fn add_size_(&mut self, size_: u64) {
    self.fbb_.push_slot::<u64>(InfoTable::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn add_count(&mut self, count: u64) {
    self.fbb_.push_slot::<u64>(InfoTable::VT_COUNT, count, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InfoTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InfoTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InfoTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InfoTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InfoTable");
      ds.field("size_", &self.size_());
      ds.field("count", &self.count());
      ds.finish()
  }
}
pub enum EmptyTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EmptyTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EmptyTable<'a> {
  type Inner = EmptyTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EmptyTable<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EmptyTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args EmptyTableArgs
  ) -> flatbuffers::WIPOffset<EmptyTable<'bldr>> {
    let mut builder = EmptyTableBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for EmptyTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct EmptyTableArgs {
}
impl<'a> Default for EmptyTableArgs {
  #[inline]
  fn default() -> Self {
    EmptyTableArgs {
    }
  }
}

pub struct EmptyTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EmptyTableBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EmptyTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EmptyTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EmptyTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EmptyTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EmptyTable");
      ds.finish()
  }
}
pub enum MapTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MapTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MapTable<'a> {
  type Inner = MapTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MapTable<'a> {
  pub const VT_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_UNK2: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MapTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args MapTableArgs<'args>
  ) -> flatbuffers::WIPOffset<MapTable<'bldr>> {
    let mut builder = MapTableBuilder::new(_fbb);
    if let Some(x) = args.unk2 { builder.add_unk2(x); }
    builder.add_index(args.index);
    builder.finish()
  }


  #[inline]
  pub fn index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MapTable::VT_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk2(&self) -> Option<EmptyTable<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<EmptyTable>>(MapTable::VT_UNK2, None)}
  }
}

impl flatbuffers::Verifiable for MapTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("index", Self::VT_INDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<EmptyTable>>("unk2", Self::VT_UNK2, false)?
     .finish();
    Ok(())
  }
}
pub struct MapTableArgs<'a> {
    pub index: u32,
    pub unk2: Option<flatbuffers::WIPOffset<EmptyTable<'a>>>,
}
impl<'a> Default for MapTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    MapTableArgs {
      index: 0,
      unk2: None,
    }
  }
}

pub struct MapTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MapTableBuilder<'a, 'b> {
  #[inline]
  pub fn add_index(&mut self, index: u32) {
    self.fbb_.push_slot::<u32>(MapTable::VT_INDEX, index, 0);
  }
  #[inline]
  pub fn add_unk2(&mut self, unk2: flatbuffers::WIPOffset<EmptyTable<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<EmptyTable>>(MapTable::VT_UNK2, unk2);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MapTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MapTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MapTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MapTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MapTable");
      ds.field("index", &self.index());
      ds.field("unk2", &self.unk2());
      ds.finish()
  }
}
pub enum TRPFDOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TRPFD<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TRPFD<'a> {
  type Inner = TRPFD<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TRPFD<'a> {
  pub const VT_FILE_HASHES: flatbuffers::VOffsetT = 4;
  pub const VT_PATHS: flatbuffers::VOffsetT = 6;
  pub const VT_MAP: flatbuffers::VOffsetT = 8;
  pub const VT_INFO: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TRPFD { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TRPFDArgs<'args>
  ) -> flatbuffers::WIPOffset<TRPFD<'bldr>> {
    let mut builder = TRPFDBuilder::new(_fbb);
    if let Some(x) = args.info { builder.add_info(x); }
    if let Some(x) = args.map { builder.add_map(x); }
    if let Some(x) = args.paths { builder.add_paths(x); }
    if let Some(x) = args.file_hashes { builder.add_file_hashes(x); }
    builder.finish()
  }


  #[inline]
  pub fn file_hashes(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(TRPFD::VT_FILE_HASHES, None)}
  }
  #[inline]
  pub fn paths(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TRPFD::VT_PATHS, None)}
  }
  #[inline]
  pub fn map(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MapTable<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MapTable>>>>(TRPFD::VT_MAP, None)}
  }
  #[inline]
  pub fn info(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<InfoTable<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<InfoTable>>>>(TRPFD::VT_INFO, None)}
  }
}

impl flatbuffers::Verifiable for TRPFD<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("file_hashes", Self::VT_FILE_HASHES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("paths", Self::VT_PATHS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MapTable>>>>("map", Self::VT_MAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<InfoTable>>>>("info", Self::VT_INFO, false)?
     .finish();
    Ok(())
  }
}
pub struct TRPFDArgs<'a> {
    pub file_hashes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub paths: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub map: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MapTable<'a>>>>>,
    pub info: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<InfoTable<'a>>>>>,
}
impl<'a> Default for TRPFDArgs<'a> {
  #[inline]
  fn default() -> Self {
    TRPFDArgs {
      file_hashes: None,
      paths: None,
      map: None,
      info: None,
    }
  }
}

pub struct TRPFDBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TRPFDBuilder<'a, 'b> {
  #[inline]
  pub fn add_file_hashes(&mut self, file_hashes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPFD::VT_FILE_HASHES, file_hashes);
  }
  #[inline]
  pub fn add_paths(&mut self, paths: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPFD::VT_PATHS, paths);
  }
  #[inline]
  pub fn add_map(&mut self, map: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MapTable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPFD::VT_MAP, map);
  }
  #[inline]
  pub fn add_info(&mut self, info: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<InfoTable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPFD::VT_INFO, info);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TRPFDBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TRPFDBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TRPFD<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TRPFD<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TRPFD");
      ds.field("file_hashes", &self.file_hashes());
      ds.field("paths", &self.paths());
      ds.field("map", &self.map());
      ds.field("info", &self.info());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TRPFD`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpfd_unchecked`.
pub fn root_as_trpfd(buf: &[u8]) -> Result<TRPFD, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TRPFD>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TRPFD` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trpfd_unchecked`.
pub fn size_prefixed_root_as_trpfd(buf: &[u8]) -> Result<TRPFD, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TRPFD>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TRPFD` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpfd_unchecked`.
pub fn root_as_trpfd_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPFD<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TRPFD<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TRPFD` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpfd_unchecked`.
pub fn size_prefixed_root_as_trpfd_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPFD<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TRPFD<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TRPFD and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TRPFD`.
pub unsafe fn root_as_trpfd_unchecked(buf: &[u8]) -> TRPFD {
  flatbuffers::root_unchecked::<TRPFD>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TRPFD and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TRPFD`.
pub unsafe fn size_prefixed_root_as_trpfd_unchecked(buf: &[u8]) -> TRPFD {
  flatbuffers::size_prefixed_root_unchecked::<TRPFD>(buf)
}
pub const TRPFD_EXTENSION: &str = "trpfd";

#[inline]
pub fn finish_trpfd_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TRPFD<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trpfd_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TRPFD<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod trpfd

