// automatically generated by the FlatBuffers compiler, do not modify


// @generated
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod trpak {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_COMPRESSION: u8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_COMPRESSION: u8 = 255;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_COMPRESSION: [Compression; 2] = [
  Compression::OODLE,
  Compression::NONE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Compression(pub u8);
#[allow(non_upper_case_globals)]
impl Compression {
  pub const OODLE: Self = Self(3);
  pub const NONE: Self = Self(255);

  pub const ENUM_MIN: u8 = 3;
  pub const ENUM_MAX: u8 = 255;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::OODLE,
    Self::NONE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::OODLE => Some("OODLE"),
      Self::NONE => Some("NONE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Compression {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Compression {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Compression {
    type Output = Compression;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Compression {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Compression {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Compression {}
pub enum FileOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct File<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for File<'a> {
  type Inner = File<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> File<'a> {
  pub const VT_UNUSED: flatbuffers::VOffsetT = 4;
  pub const VT_COMPRESSION_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_UNK1: flatbuffers::VOffsetT = 8;
  pub const VT_DECOMPRESSED_SIZE: flatbuffers::VOffsetT = 10;
  pub const VT_DATA: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    File { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FileArgs<'args>
  ) -> flatbuffers::WIPOffset<File<'bldr>> {
    let mut builder = FileBuilder::new(_fbb);
    builder.add_decompressed_size(args.decompressed_size);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.add_unk1(args.unk1);
    builder.add_compression_type(args.compression_type);
    builder.add_unused(args.unused);
    builder.finish()
  }


  #[inline]
  pub fn unused(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(File::VT_UNUSED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn compression_type(&self) -> Compression {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Compression>(File::VT_COMPRESSION_TYPE, Some(Compression::NONE)).unwrap()}
  }
  #[inline]
  pub fn unk1(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(File::VT_UNK1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn decompressed_size(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(File::VT_DECOMPRESSED_SIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(File::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for File<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("unused", Self::VT_UNUSED, false)?
     .visit_field::<Compression>("compression_type", Self::VT_COMPRESSION_TYPE, false)?
     .visit_field::<u8>("unk1", Self::VT_UNK1, false)?
     .visit_field::<u64>("decompressed_size", Self::VT_DECOMPRESSED_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct FileArgs<'a> {
    pub unused: u8,
    pub compression_type: Compression,
    pub unk1: u8,
    pub decompressed_size: u64,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for FileArgs<'a> {
  #[inline]
  fn default() -> Self {
    FileArgs {
      unused: 0,
      compression_type: Compression::NONE,
      unk1: 0,
      decompressed_size: 0,
      data: None,
    }
  }
}

pub struct FileBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FileBuilder<'a, 'b> {
  #[inline]
  pub fn add_unused(&mut self, unused: u8) {
    self.fbb_.push_slot::<u8>(File::VT_UNUSED, unused, 0);
  }
  #[inline]
  pub fn add_compression_type(&mut self, compression_type: Compression) {
    self.fbb_.push_slot::<Compression>(File::VT_COMPRESSION_TYPE, compression_type, Compression::NONE);
  }
  #[inline]
  pub fn add_unk1(&mut self, unk1: u8) {
    self.fbb_.push_slot::<u8>(File::VT_UNK1, unk1, 0);
  }
  #[inline]
  pub fn add_decompressed_size(&mut self, decompressed_size: u64) {
    self.fbb_.push_slot::<u64>(File::VT_DECOMPRESSED_SIZE, decompressed_size, 0);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(File::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FileBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FileBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<File<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for File<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("File");
      ds.field("unused", &self.unused());
      ds.field("compression_type", &self.compression_type());
      ds.field("unk1", &self.unk1());
      ds.field("decompressed_size", &self.decompressed_size());
      ds.field("data", &self.data());
      ds.finish()
  }
}
pub enum TRPAKOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TRPAK<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TRPAK<'a> {
  type Inner = TRPAK<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TRPAK<'a> {
  pub const VT_HASHES: flatbuffers::VOffsetT = 4;
  pub const VT_FILES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TRPAK { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TRPAKArgs<'args>
  ) -> flatbuffers::WIPOffset<TRPAK<'bldr>> {
    let mut builder = TRPAKBuilder::new(_fbb);
    if let Some(x) = args.files { builder.add_files(x); }
    if let Some(x) = args.hashes { builder.add_hashes(x); }
    builder.finish()
  }


  #[inline]
  pub fn hashes(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(TRPAK::VT_HASHES, None)}
  }
  #[inline]
  pub fn files(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<File<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<File>>>>(TRPAK::VT_FILES, None)}
  }
}

impl flatbuffers::Verifiable for TRPAK<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("hashes", Self::VT_HASHES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<File>>>>("files", Self::VT_FILES, false)?
     .finish();
    Ok(())
  }
}
pub struct TRPAKArgs<'a> {
    pub hashes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub files: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<File<'a>>>>>,
}
impl<'a> Default for TRPAKArgs<'a> {
  #[inline]
  fn default() -> Self {
    TRPAKArgs {
      hashes: None,
      files: None,
    }
  }
}

pub struct TRPAKBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TRPAKBuilder<'a, 'b> {
  #[inline]
  pub fn add_hashes(&mut self, hashes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPAK::VT_HASHES, hashes);
  }
  #[inline]
  pub fn add_files(&mut self, files: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<File<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRPAK::VT_FILES, files);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TRPAKBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TRPAKBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TRPAK<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TRPAK<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TRPAK");
      ds.field("hashes", &self.hashes());
      ds.field("files", &self.files());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TRPAK`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpak_unchecked`.
pub fn root_as_trpak(buf: &[u8]) -> Result<TRPAK, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TRPAK>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TRPAK` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trpak_unchecked`.
pub fn size_prefixed_root_as_trpak(buf: &[u8]) -> Result<TRPAK, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TRPAK>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TRPAK` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpak_unchecked`.
pub fn root_as_trpak_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPAK<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TRPAK<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TRPAK` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpak_unchecked`.
pub fn size_prefixed_root_as_trpak_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPAK<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TRPAK<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TRPAK and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TRPAK`.
pub unsafe fn root_as_trpak_unchecked(buf: &[u8]) -> TRPAK {
  flatbuffers::root_unchecked::<TRPAK>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TRPAK and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TRPAK`.
pub unsafe fn size_prefixed_root_as_trpak_unchecked(buf: &[u8]) -> TRPAK {
  flatbuffers::size_prefixed_root_unchecked::<TRPAK>(buf)
}
pub const TRPAK_EXTENSION: &str = "trpak";

#[inline]
pub fn finish_trpak_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TRPAK<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trpak_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TRPAK<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod trpak

